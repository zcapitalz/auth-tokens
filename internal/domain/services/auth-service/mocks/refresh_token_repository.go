// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "auth/internal/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RefreshTokenRepository is an autogenerated mock type for the RefreshTokenRepository type
type RefreshTokenRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: token
func (_m *RefreshTokenRepository) Create(token *domain.RefreshToken) (uuid.UUID, error) {
	ret := _m.Called(token)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(*domain.RefreshToken) uuid.UUID); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.RefreshToken) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllExpired provides a mock function with given fields:
func (_m *RefreshTokenRepository) DeleteAllExpired() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByID provides a mock function with given fields: id
func (_m *RefreshTokenRepository) DeleteByID(id uuid.UUID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: id
func (_m *RefreshTokenRepository) GetByID(id uuid.UUID) (*domain.RefreshToken, error) {
	ret := _m.Called(id)

	var r0 *domain.RefreshToken
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.RefreshToken); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RefreshToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRefreshTokenRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRefreshTokenRepository creates a new instance of RefreshTokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRefreshTokenRepository(t mockConstructorTestingTNewRefreshTokenRepository) *RefreshTokenRepository {
	mock := &RefreshTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
